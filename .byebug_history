c
@song
n
c
@current_user.followees
@current_user.user_type
c
@current_user.user_type
@user
@current_user
c
@current_user.followees.pluck(:id)
@current_user.followees
@current_user
@current_user.followers
@current_user.user_type
@current_user
songs_per_page
c
songs_per_page
songs
c
n
c
@current_user.followees.include?(@user)
@current_user.followees.include?(@user.id)
@current_user.followees
@current_user.follows
@current_user.followed_users.include?(followee_id: @user.id)
@current_user.followed_users.include?(@user.id)
@current_user.followed_users.include?(@user.ids)
@current_user.followed_users.include?(@user.id)
@current_user.followed_users.include?(@user.followees.id)
@current_user.followed_users.include?(@user.followee.id)
@user
@current_user.followed_users
@current_user
c
@current_user.following_users
@current_user.followed_users
@current_user.following_users
@current_user.followees
@current_user.followers
@current_user
if @current_user.following_users
if @current_user.following_users(@user)
if @current_user.following_users.include?(@user)
c
n
c
n
c
n
/n
\n
n
@song = Song.find(params[:id])
id
params
song_id
c
@song
c
n
/n
n
song_id
params
:song_id
c
params[:query]
params[:query].present?
params
c
list = songs.where(status: 'public')
list
songs.where(status: 'public')
songs.present?
songs = Song.paginate(page: params[:page], per_page: 5)
c
@current_user.followees << @user
@user = User.find_by_id(params[:id])
params[:id]
params
:id
@user
c
continue
id
:id
n
:title
title
songs
c
@current_user
@current_user.user_type
c
@album.user_id
@album
@current_user.id
@current_user
c
genre
c
save!
password = password
reset_password_token = nil
c
save!
reset_password_sent_at = Time.now.utc
reset_password_token = generate_token
c
self.save!
reset_password_sent_at = Time.now.utc
reset_password_token = generate_token
c
save!
self.reset_password_sent_at = Time.now.utc
self.reset_password_token = generate_token
self.reset_password_token
generate_token
c
if email_changed? && !@new_email.blank? && @new_email != @current_user.email
c
songs
c
songs
songsa
c
@current_user
c
@current_user
@playlist
c
songs
songs = Song.where("title LIKE ?", "%#{title}%")
c
if title.present?
title = params[:title]
c
if title.present?
title = params[:title]
c
@user
c
@user
user
c
@user
if @current_user.id == @user.id
c
playlist_params
c
playlist_params
c
playlist_params
c
songs_url
song_id
@playlist
playlist_params
recently_played_song
recently_played_song = @current_user.recentyly_playeds
c
merged_playlist = @current_user.playlists.create!(title: title)
c
merged_playlist = @current_user.Playlist.create!(title: title)
c
merged_playlist = Playlist.create!(title: title)
c
merged_playlist = Playlist.create!(title: title)
c
merged_playlist = Playlist.create!(title: title)
c
merged_playlist = Playlist.create(title: title)
title = params[:title]
c
(playlist1.user_id == @current_user.id && playlist2.user_id == @current_user.id)
playlist2 = Playlist.find(playlist2_id)
playlist1 = Playlist.find(playlist1_id)
playlist2_id = params[:playlist2_id]
playlist1_id = params[:playlist1_id]
playlist1_id
c
playlist1.user_id
@current_user.id
c
playlist1_id = params[:playlist1_id]
unless playlist1.user_id==@current_user.id && playlist2.user_id == @current_user.id
playlist2 = Playlist.find(playlist2_id)
playlist1 = Playlist.find(playlist1_id)
playlist2_id = params[:playlist2_id]
playlist1_id = params[:playlist1_id]
=> 69:     playlist1_id = params[:playlist1_id]
c
params
song_id
c
@current_user
top_songs = Song.where(user_id: user_id).order(play_count: :desc).limit(10)
play_count
user_id = @current_user.id
user_id
c
user_id = @current_user.id 
@current_user.id
@current_user
user_id
c
@current_user.id
@current_user
user_id
c
@current_user.songs.new(song_params)
song_params
@current_user
c
song = @current_user.songs.new(song_params)
c
@current_user = User.find(decoded[:user_id])
c
@artist = Artist.find(params[:id])
continue
exit
@current_user = User.find(decoded[:user_id])
decoded = jwt_decode(header)
header = header.split(' ').last if header
header = header.splite(' ').last if header
header = request.headers["Authorization"]
Authorization
Authorizatio
exit
header = request.headers["Authorizatio"]
exit
decoded = jwt_decode(header)
header = header.splite(' ').last if header
header = request.headers["Authorizatio"]
